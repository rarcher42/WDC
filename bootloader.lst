
; 64tass Turbo Assembler Macro V1.59.3120 listing file
; 64tass -c -L bootloader.lst --intel-hex -o bootloader.hex bootloader.asm
; Sun Jun 30 18:36:30 2024

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: bootloader.asm

=$01					MASK0	=	 %00000001
=$02					MASK1	=	 %00000010
=$04					MASK2	=	 %00000100
=$08					MASK3	=	 %00001000
=$10					MASK4	=	 %00010000
=$20					MASK5	=	 %00100000
=$40					MASK6	=	 %01000000
=$80					MASK7	=	 %10000000
>0020					DP_START	.byte	?
>0021					PTR_L		.byte	?	; Generic pointer
>0022					PTR_H		.byte	?
>0023					PTR_B		.byte	?
>0024					CTR_L		.byte	?	; Counter
>0025					CTR_H		.byte	?
>0026					CTR_B		.byte	?
>0027					SA_L		.byte 	?	; Starting address storage
>0028					SA_H		.byte 	?
>0029					SA_B		.byte	?
>002a					DATA_CNT	.byte 	?	; Count of record's actual storable data bytes
>002b					EXTRA		.byte	? 	; Used inside loader.  Otherwise, free for use
>002c					TEMP 	  	.byte	?	; May be used within any subroutine
=$7fe0					SYS_VIA_BASE	    = $7FE0
=32736					SYSTEM_VIA_IORB     =  	SYS_VIA_BASE+0	; Port B IO register
=32737					SYSTEM_VIA_IORA     =	SYS_VIA_BASE+1 	; Port A IO register
=32738					SYSTEM_VIA_DDRB     = 	SYS_VIA_BASE+2	; Port B data direction register
=32739					SYSTEM_VIA_DDRA     = 	SYS_VIA_BASE+3	; Port A data direction register
=32740					SYSTEM_VIA_T1C_L    =	SYS_VIA_BASE+4 	; Timer 1 counter/latches, low-order
=32741					SYSTEM_VIA_T1C_H    = 	SYS_VIA_BASE+5	; Timer 1 high-order counter
=32742					SYSTEM_VIA_T1L_L    = 	SYS_VIA_BASE+6	; Timer 1 low-order latches
=32743					SYSTEM_VIA_T1L_H    = 	SYS_VIA_BASE+7	; Timer 1 high-order latches
=32744					SYSTEM_VIA_T2C_L    = 	SYS_VIA_BASE+8	; Timer 2 counter/latches, lower-order
=32745					SYSTEM_VIA_T2C_H    = 	SYS_VIA_BASE+9	; Timer 2 high-order counter
=32746					SYSTEM_VIA_SR       = 	SYS_VIA_BASE+10	; Shift register
=32747					SYSTEM_VIA_ACR      = 	SYS_VIA_BASE+11	; Auxilliary control register
=32748					SYSTEM_VIA_PCR      =	SYS_VIA_BASE+12	; Peripheral control register
=32749					SYSTEM_VIA_IFR	    =	SYS_VIA_BASE+13 ; Interrupt flag register
=32750					SYSTEM_VIA_IER      = 	SYS_VIA_BASE+14	; Interrupt enable register
=32751					SYSTEM_VIA_ORA_IRA  =	SYS_VIA_BASE+15	; Port A IO register, but no handshake
=$01					PB0 = MASK0
=$02					PB1 = MASK1
=$04					PB2 = MASK2
=$08					PB3 = MASK3
=$10					PB4 = MASK4
=$20					PB5 = MASK5
=$40					PB6 = MASK6
=$80					PB7 = MASK7
=$00					ALL_INPUTS = $00
=$ff					ALL_OUTPUTS = $FF
.f800	78		sei		START   	SEI                     ; disable interrupts
.f801	d8		cld		        	CLD                     ; binary mode arithmetic (not required on 65C02 or 65816)
.f802	a2 ff		ldx #$ff	        	LDX    	#$FF            ; Set up the stack pointer
.f804	9a		txs		        	TXS
.f805	20 73 f9	jsr $f973			JSR	INITSER       	;
.f808	a2 fa		ldx #$fa	OUTMSG		LDX	#>ENTRYMSG
.f80a	a0 78		ldy #$78			LDY	#<ENTRYMSG
.f80c	20 ae f9	jsr $f9ae			JSR	PRINTXY
.f80f	20 8b f9	jsr $f98b			JSR	PUTCRLF
.f812	a9 f8		lda #$f8			LDA	#$F8
.f814	85 22		sta $22				STA	PTR_H
.f816	a9 00		lda #$00			LDA	#$00
.f818	85 21		sta $21				STA	PTR_L
.f81a	a9 02		lda #$02			LDA	#>512
.f81c	85 25		sta $25				STA	CTR_H
.f81e	a9 00		lda #$00			LDA	#<512
.f820	85 24		sta $24				STA	CTR_L
.f822	20 4d f9	jsr $f94d			JSR	DUMPHEX
.f825	a2 fa		ldx #$fa			LDX	#>DOWNLOAD
.f827	a0 ad		ldy #$ad			LDY	#<DOWNLOAD
.f829	20 ae f9	jsr $f9ae			JSR	PRINTXY
.f82c	20 8b f9	jsr $f98b			JSR	PUTCRLF
.f82f	20 7e f9	jsr $f97e	ECHO		JSR	GETCHA
.f832	b0 fb		bcs $f82f			BCS	ECHO
.f834	20 e4 f9	jsr $f9e4			JSR	PUTCH
.f837	80 f6		bra $f82f			BRA	ECHO
.f839					S_LOAD
.f839					SYNC:
.f839	20 9f f9	jsr $f99f			JSR	GETCH
.f83c	c9 53		cmp #$53			CMP	#'S'
.f83e	d0 f9		bne $f839			BNE	SYNC
.f840	20 9f f9	jsr $f99f			JSR	GETCH
.f843	8d 80 7f	sta $7f80			STA	SDR		; Echo record type back to show sync initially
.f846	c9 31		cmp #$31			CMP	#'1'
.f848	f0 20		beq $f86a			BEQ	GET16
.f84a	c9 32		cmp #$32			CMP	#'2'
.f84c	f0 16		beq $f864			BEQ	GET24
.f84e	c9 35		cmp #$35			CMP	#'5'
.f850	f0 55		beq $f8a7			BEQ	CNT16
.f852	c9 36		cmp #$36			CMP	#'6'
.f854	f0 62		beq $f8b8			BEQ	CNT24
.f856	c9 38		cmp #$38			CMP	#'8'
.f858	d0 03		bne $f85d			BNE	SLC1
.f85a	4c e4 f8	jmp $f8e4			JMP	SA24		; Too far for relative branch
.f85d	c9 39		cmp #$39	SLC1		CMP	#'9'
.f85f	f0 6c		beq $f8cd			BEQ	SA16
.f861	4c 39 f8	jmp $f839			JMP	SYNC
.f864	a9 04		lda #$04	GET24		LDA	#4
.f866	85 2b		sta $2b				STA	EXTRA
.f868	80 04		bra $f86e			BRA	GET1624
.f86a	a9 03		lda #$03	GET16		LDA	#3
.f86c	85 2b		sta $2b				STA	EXTRA
.f86e	64 23		stz $23		GET1624		STZ	PTR_B		; Set bank to 0 unless test for 24 bit later
.f870	20 2b f9	jsr $f92b			JSR	GETHEX		; Get byte count
.f873	38		sec				SEC
.f874	e5 2b		sbc $2b				SBC	EXTRA		; Subtract 3 for S1, 4 for S2 to get data size
.f876	85 2a		sta $2a				STA	DATA_CNT	; Expected number of data bytes to write to RAM
.f878	a5 2b		lda $2b				LDA	EXTRA
.f87a	c9 03		cmp #$03			CMP	#3
.f87c	f0 05		beq $f883			BEQ	GET16C1
.f87e	20 2b f9	jsr $f92b			JSR	GETHEX
.f881	85 23		sta $23				STA	PTR_B		; Store the bank for 24 bit records
.f883	20 2b f9	jsr $f92b	GET16C1		JSR	GETHEX
.f886	85 22		sta $22				STA	PTR_H
.f888	20 2b f9	jsr $f92b			JSR	GETHEX
.f88b	85 21		sta $21				STA	PTR_L
.f88d	a5 2a		lda $2a				LDA	DATA_CNT	; It's possible to have a record with no data bytes
.f88f	f0 0c		beq $f89d			BEQ 	G16X1		; All payload data bytes written to RAM
.f891	20 2b f9	jsr $f92b	SAVDAT:		JSR	GETHEX
.f894	92 21		sta ($21)			STA	(PTR_L)		; Stoare value @ PTR
.f896	20 0d f9	jsr $f90d			JSR	INC_PTR
.f899	c6 2a		dec $2a				DEC	DATA_CNT	;
.f89b	d0 f4		bne $f891			BNE	SAVDAT		; Process more bytes
.f89d	20 2b f9	jsr $f92b	G16X1		JSR 	GETHEX		; get CKSUM	(implement later)
.f8a0	a9 23		lda #$23			LDA	#'#'
.f8a2	8d 80 7f	sta $7f80			STA	SDR		; Give feedback.  Another record in
.f8a5	80 92		bra $f839			BRA	SYNC
.f8a7	20 2b f9	jsr $f92b	CNT16		JSR	GETHEX		; length byte
.f8aa	64 26		stz $26				STZ	CTR_B
.f8ac	20 2b f9	jsr $f92b			JSR	GETHEX		; bits 15-8
.f8af	85 25		sta $25				STA	CTR_H
.f8b1	20 2b f9	jsr $f92b			JSR	GETHEX		; bits 7-0
.f8b4	85 24		sta $24				STA	CTR_L
.f8b6	80 81		bra $f839			BRA	SYNC
.f8b8	20 2b f9	jsr $f92b	CNT24		JSR	GETHEX		; length byte
.f8bb	20 2b f9	jsr $f92b			JSR	GETHEX
.f8be	85 26		sta $26				STA	CTR_B
.f8c0	20 2b f9	jsr $f92b			JSR	GETHEX		; bits 15-8
.f8c3	85 25		sta $25				STA	CTR_H
.f8c5	20 2b f9	jsr $f92b			JSR	GETHEX		; bits 7-0
.f8c8	85 24		sta $24				STA	CTR_L
.f8ca	4c 39 f8	jmp $f839			JMP	SYNC
.f8cd	20 2b f9	jsr $f92b	SA16		JSR	GETHEX		; length byte
.f8d0	64 29		stz $29				STZ	SA_B
.f8d2	20 2b f9	jsr $f92b			JSR	GETHEX		; bits 15-8
.f8d5	85 28		sta $28				STA	SA_H
.f8d7	20 2b f9	jsr $f92b			JSR	GETHEX		; bits 7-0
.f8da	85 27		sta $27				STA	SA_L
.f8dc	a9 2a		lda #$2a			LDA	#'*'
.f8de	8d 80 7f	sta $7f80			STA	SDR		; end of records 16
.f8e1	4c 39 f8	jmp $f839			JMP	SYNC
.f8e4	20 2b f9	jsr $f92b	SA24		JSR	GETHEX		; length byte
.f8e7	20 2b f9	jsr $f92b			JSR	GETHEX
.f8ea	85 29		sta $29				STA	SA_B
.f8ec	20 2b f9	jsr $f92b			JSR	GETHEX		; bits 15-8
.f8ef	85 28		sta $28				STA	SA_H
.f8f1	20 2b f9	jsr $f92b			JSR	GETHEX		; bits 7-0
.f8f4	85 27		sta $27				STA	SA_L
.f8f6	a9 26		lda #$26			LDA	#'&'
.f8f8	8d 80 7f	sta $7f80			STA	SDR		; end of records 24
.f8fb	4c 39 f8	jmp $f839			JMP	SYNC
.f8fe	a5 22		lda $22		PR_ADDR		LDA	PTR_H
.f900	20 d1 f9	jsr $f9d1			JSR	PUTHEX
.f903	a5 21		lda $21				LDA	PTR_L
.f905	20 d1 f9	jsr $f9d1			JSR	PUTHEX
.f908	a9 3a		lda #$3a			LDA	#':'
.f90a	4c e4 f9	jmp $f9e4			JMP	PUTCH
.f90d	e6 21		inc $21		INC_PTR		INC	PTR_L		; point to the next byte
.f90f	d0 02		bne $f913			BNE	IPXIT1
.f911	e6 22		inc $22				INC	PTR_H
.f913	60		rts		IPXIT1		RTS
.f914	a5 24		lda $24		DEC_CTR		LDA	CTR_L
.f916	d0 06		bne $f91e			BNE	DCC_C1		; No borrow if > 0
.f918	a5 25		lda $25				LDA	CTR_H
.f91a	f0 08		beq $f924			BEQ	DCXIT2		; already zero; don't decrement
.f91c	c6 25		dec $25				DEC	CTR_H		; Borrow because CTR_L will be 0xFF after dec below
.f91e	c6 24		dec $24		DCC_C1		DEC	CTR_L
.f920	a5 25		lda $25		DCXIT1		LDA	CTR_H		; set zero flag on exit
.f922	05 24		ora $24				ORA	CTR_L
.f924	60		rts		DCXIT2		RTS
.f925	b2 21		lda ($21)	RD_BYTE		LDA	(PTR_L)
.f927	60		rts				RTS			; FIXME: write as a macro
.f928	92 21		sta ($21)	WR_BYTE		STA	(PTR_L)		; FIXME: write as a macro
.f92a	60		rts				RTS
.f92b	20 9f f9	jsr $f99f	GETHEX  	JSR     GETCH
.f92e	20 42 f9	jsr $f942	        	JSR     MKNIBL  	; Convert to 0..F numeric
.f931	0a		asl a		        	ASL     A
.f932	0a		asl a		        	ASL     A
.f933	0a		asl a		        	ASL     A
.f934	0a		asl a		        	ASL     A       	; This is the upper nibble
.f935	29 f0		and #$f0	        	AND     #$F0
.f937	85 2c		sta $2c		        	STA     TEMP
.f939	20 9f f9	jsr $f99f	        	JSR     GETCH
.f93c	20 42 f9	jsr $f942	        	JSR     MKNIBL
.f93f	05 2c		ora $2c		        	ORA    	TEMP
.f941	60		rts		        	RTS
.f942	c9 3a		cmp #$3a	MKNIBL  	CMP     #'9'+1  	; See if it's 0-9 or 'A'..'F' (no lowercase yet)
.f944	90 02		bcc $f948	        	BCC     MKNNH   	; If we borrowed, we lost the carry so 0..9
.f946	e9 08		sbc #$08	        	SBC     #7+1    	; Subtract off extra 7 (sbc subtracts off one less)
.f948	e9 2f		sbc #$2f	MKNNH   	SBC     #'0'-1  	; subtract off '0' (if carry clear coming in)
.f94a	29 0f		and #$0f	        	AND     #$0F    	; no upper nibble no matter what
.f94c	60		rts		        	RTS             	; and return the nibble
.f94d	20 8b f9	jsr $f98b	DUMPHEX		JSR	PUTCRLF
.f950	20 fe f8	jsr $f8fe			JSR	PR_ADDR
.f953	20 a8 f9	jsr $f9a8			JSR	PUTSP
.f956	20 25 f9	jsr $f925	NXTBYTE		JSR	RD_BYTE		; Get byte at (PTR)
.f959	20 d1 f9	jsr $f9d1			JSR	PUTHEX
.f95c	20 a8 f9	jsr $f9a8			JSR	PUTSP
.f95f	20 14 f9	jsr $f914			JSR	DEC_CTR
.f962	f0 0b		beq $f96f			BEQ 	DUMPHX1
.f964	20 0d f9	jsr $f90d			JSR	INC_PTR		; Point to the next byte
.f967	a5 21		lda $21		CHKEOL		LDA	PTR_L
.f969	29 0f		and #$0f			AND	#$0F		; Look at next address to write
.f96b	d0 e9		bne $f956			BNE	NXTBYTE		; inter-line byte, so continue dumping
.f96d	80 de		bra $f94d			BRA	DUMPHEX		; Start a new line
.f96f	20 8b f9	jsr $f98b	DUMPHX1		JSR	PUTCRLF
.f972	60		rts				RTS
=$7f80					ACIA_BASE = $7F80		; This is where the 6551 ACIA starts
=$7f80					SDR = ACIA_BASE       		; RX'ed bytes read, TX bytes written, here
=32641					SSR = ACIA_BASE+1     		; Serial data status register
=32642					SCMD = ACIA_BASE+2     		; Serial command reg. ()
=32643					SCTL = ACIA_BASE+3     		; Serial control reg. ()
=$10					TX_RDY = MASK4
=$08					RX_RDY = MASK3
=$1e					SCTL_V  = %00011110       ; 9600 baud, 8 bits, 1 stop bit, rxclock = txclock
=$0b					SCMD_V  = %00001011       ; No parity, no echo, no tx or rx IRQ (for now), DTR*
.f973	a9 1e		lda #$1e	INITSER 	LDA     #SCTL_V 	; 9600,n,8,1.  rxclock = txclock
.f975	8d 83 7f	sta $7f83			STA 	SCTL
.f978	a9 0b		lda #$0b			LDA     #SCMD_V 	; No parity, no echo, no tx or rx IRQ (for now), DTR*
.f97a	8d 82 7f	sta $7f82			STA     SCMD
.f97d	60		rts				RTS
.f97e	ad 81 7f	lda $7f81	GETCHA		LDA	SSR
.f981	29 08		and #$08			AND	#RX_RDY
.f983	38		sec				SEC			; C=1 because no character is waiting
.f984	f0 04		beq $f98a			BEQ	GCHAX1
.f986	ad 80 7f	lda $7f80			LDA	SDR
.f989	18		clc				CLC			; Character waiting in A
.f98a	60		rts		GCHAX1		RTS
.f98b	a9 0d		lda #$0d	PUTCRLF		LDA	#13
.f98d	20 92 f9	jsr $f992			JSR	PUTSER
.f990	a9 0a		lda #$0a	PUTLF		LDA	#10
.f992					PUTSER
.f992	8d 80 7f	sta $7f80	PUTCHA		STA	SDR
.f995	20 eb f9	jsr $f9eb		 	JSR	TXCHDLY		; Awful kludge
.f998	60		rts				RTS
.f999	ad 81 7f	lda $7f81	SERRDY		LDA	SSR
.f99c	29 08		and #$08			AND	#RX_RDY
.f99e	60		rts				RTS			; 0 = no byte ready
.f99f	20 99 f9	jsr $f999	GETCH		JSR	SERRDY		; Since we're busy waiting, JSR overhead is fine :)
.f9a2	f0 fb		beq $f99f			BEQ	GETCH
.f9a4	ad 80 7f	lda $7f80			LDA	SDR
.f9a7	60		rts				RTS
.f9a8	a9 20		lda #$20	PUTSP		LDA	#' '
.f9aa	20 92 f9	jsr $f992			JSR	PUTSER
.f9ad	60		rts				RTS
.f9ae	86 22		stx $22		PRINTXY		STX	PTR_H		; Save the address in direct page pointer@PTR
.f9b0	84 21		sty $21				STY	PTR_L
.f9b2	b2 21		lda ($21)	PRINTLP1	LDA	(PTR_L)
.f9b4	f0 0b		beq $f9c1			BEQ	PRAXIT		; We reached the terminating null
.f9b6	20 92 f9	jsr $f992			JSR	PUTSER
.f9b9	e6 21		inc $21				INC	PTR_L
.f9bb	d0 f5		bne $f9b2			BNE	PRINTLP1
.f9bd	e6 22		inc $22				INC	PTR_H		; overflow on low ptr count; inc high ptr
.f9bf	80 f1		bra $f9b2			BRA	PRINTLP1
.f9c1	60		rts		PRAXIT		RTS
.f9c2	20 d1 f9	jsr $f9d1	PUTHEX24	JSR	PUTHEX
.f9c5	a9 3a		lda #$3a			LDA	#':'
.f9c7	20 92 f9	jsr $f992			JSR 	PUTSER
.f9ca	5a		phy		PUTHEX16	PHY
.f9cb	8a		txa				TXA
.f9cc	20 d1 f9	jsr $f9d1			JSR	PUTHEX
.f9cf	7a		ply				PLY
.f9d0	98		tya				TYA
.f9d1	48		pha		PUTHEX  	PHA             	;
.f9d2	4a		lsr a		        	LSR 	A
.f9d3	4a		lsr a		        	LSR 	A
.f9d4	4a		lsr a				LSR 	A
.f9d5	4a		lsr a				LSR 	A
.f9d6	20 da f9	jsr $f9da	        	JSR     PRNIBL
.f9d9	68		pla		        	PLA
.f9da	29 0f		and #$0f	PRNIBL  	AND     #$0F    	; strip off the low nibble
.f9dc	c9 0a		cmp #$0a	        	CMP     #$0A
.f9de	90 02		bcc $f9e2	        	BCC  	NOTHEX  	; if it's 0-9, add '0' else also add 7
.f9e0	69 06		adc #$06	        	ADC     #6      	; Add 7 (6+carry=1), result will be carry clear
.f9e2	69 30		adc #$30	NOTHEX  	ADC     #'0'    	; If carry clear, we're 0-9
.f9e4	8d 80 7f	sta $7f80	PUTCH		STA	SDR
.f9e7	20 eb f9	jsr $f9eb		 	JSR	TXCHDLY		; Awful kludge
.f9ea	60		rts				RTS
=$06f0					TX_DLY_CYCLES = $06F0		; Not tuned.  As it's temporary, optimum settings are unimportant.
.f9eb	48		pha		TXCHDLY		PHA
.f9ec	da		phx				PHX
.f9ed	5a		phy				PHY
.f9ee	a2 06		ldx #$06			LDX	#>TX_DLY_CYCLES		; FIXME: Very bad work-around until timers are up
.f9f0	a0 f0		ldy #$f0			LDY	#<TX_DLY_CYCLES
.f9f2	20 f9 f9	jsr $f9f9			JSR 	DLY_XY
.f9f5	7a		ply				PLY
.f9f6	fa		plx				PLX
.f9f7	68		pla				PLA
.f9f8	60		rts				RTS
.f9f9	98		tya		DLY_XY		TYA
.f9fa	f0 03		beq $f9ff			BEQ	DLC1
.f9fc	88		dey		INNER1		DEY
.f9fd	d0 fd		bne $f9fc			BNE	INNER1
.f9ff	8a		txa		DLC1		TXA
.fa00	f0 04		beq $fa06			BEQ	TDXIT1
.fa02	ca		dex				DEX
.fa03	88		dey				DEY	; Y<= 0xFF
.fa04	80 f3		bra $f9f9			BRA	DLY_XY
.fa06	60		rts		TDXIT1		RTS
=$01					FIFO_TXE = PB0
=$02					FIFO_RXF = PB1
=$04					FIFO_WR = PB2
=$08					FIFO_RD = PB3
=$20					FIFO_PWREN = PB5
.fa07	9c ec 7f	stz $7fec	INITFIFO   	STZ     SYSTEM_VIA_PCR			; float CB2 (FAMS) hi so flash A16=1; float CA2 (FA15) hi so flash A15=1 (Bank #3)
.fa0a	9c eb 7f	stz $7feb			STZ 	SYSTEM_VIA_ACR			; Disable PB7, shift register, timer T1 interrupt.  Not absolutely required while interrupts are disabled FIXME: set up timer
.fa0d	9c e3 7f	stz $7fe3			STZ	SYSTEM_VIA_DDRA			; Set PA0-PA7 to all inputs
.fa10	9c e2 7f	stz $7fe2			STZ	SYSTEM_VIA_DDRB			; In case we're not coming off a reset, make PORT B an input and change output register when it's NOT outputting
.fa13	a9 08		lda #$08			LDA	#FIFO_RD				;
.fa15	8d e0 7f	sta $7fe0			STA	SYSTEM_VIA_IORB			; Avoid possible glitch by writing to output latch while Port B is still an input (after reset)
.fa18	a9 0c		lda #$0c			LDA	#(FIFO_RD + FIFO_WR)	; Make the FIFO RD and FIFO_WR pins outputs so we can strobe data in and out of the FIFO
.fa1a	8d e2 7f	sta $7fe2			STA	SYSTEM_VIA_DDRB			; Port B: PB2 and PB3 are outputs; rest are inputs from earlier IORB write
.fa1d	ea		nop				NOP								; FIXME: Defensive and possibly unnecessary
.fa1e					FIFOPWR:
.fa1e	ad e0 7f	lda $7fe0			LDA	SYSTEM_VIA_IORB
.fa21	29 20		and #$20			AND	#FIFO_PWREN				; PB5 = PWRENB. 0=enabled 1=disabled
.fa23	d0 f9		bne $fa1e			BNE	FIFOPWR
.fa25	60		rts				RTS
.fa26	85 2c		sta $2c		PUTCHB  	STA	TEMP			; save output character
.fa28	ad e0 7f	lda $7fe0			LDA	SYSTEM_VIA_IORB		; Read in FIFO status Port for FIFO
.fa2b	29 01		and #$01			AND	#FIFO_TXE		; If TXE is low, we can accept data into FIFO.  If high, return immmediately
.fa2d	38		sec				SEC				; FIFO is full, so don't try to queue it!
.fa2e	d0 23		bne $fa53			BNE	OFX1			; 0 = OK to write to FIFO; 1 = Wait, FIFO full!
.fa30	9c e3 7f	stz $7fe3	OFCONT		STZ	SYSTEM_VIA_DDRA		; (Defensive) Start with Port A input/floating
.fa33	a9 0c		lda #$0c			LDA	#(FIFO_RD + FIFO_WR)	; RD=1 WR=1 (WR must go 1->0 for FIFO write)
.fa35	8d e0 7f	sta $7fe0			STA	SYSTEM_VIA_IORB		; Make sure write is high (and read too!)
.fa38	a5 2c		lda $2c				LDA	TEMP
.fa3a	8d e1 7f	sta $7fe1			STA	SYSTEM_VIA_IORA		; Set up output value in advance in Port A (still input so doesn't go out yet)
.fa3d	a9 ff		lda #$ff			LDA	#$FF			; make Port A all outputs with stable output value already set in prior lines
.fa3f	8d e3 7f	sta $7fe3			STA	SYSTEM_VIA_DDRA		; Save data to output latches
.fa42	ea		nop				NOP				; Some settling time of data output just to be safe
.fa43	ea		nop				NOP
.fa44	ea		nop				NOP
.fa45	ea		nop				NOP
.fa46	a9 08		lda #$08			LDA	#(FIFO_RD)		; RD=1 WR=0 (WR1->0 transition triggers FIFO transfer!)
.fa48	8d e0 7f	sta $7fe0			STA	SYSTEM_VIA_IORB		; Low-going WR pulse should latch data
.fa4b	ea		nop				NOP				; Hold time following write strobe, to ensure value is latched OK
.fa4c	ea		nop				NOP
.fa4d	ea		nop				NOP
.fa4e	ea		nop				NOP
.fa4f	9c e3 7f	stz $7fe3			STZ	SYSTEM_VIA_DDRA		; Make port A an input again
.fa52	18		clc				CLC				; signal success of write to caller
.fa53	60		rts		OFX1	  	RTS
.fa54	ad e0 7f	lda $7fe0	GETCHB		LDA	SYSTEM_VIA_IORB	; Check RXF flag
.fa57	29 02		and #$02			AND	#FIFO_RXF		; If clear, we're OK to read.  If set, there's no data waiting
.fa59	38		sec				SEC
.fa5a	d0 1b		bne $fa77			BNE 	INFXIT			; If RXF is 1, then no character is waiting!
.fa5c	9c e3 7f	stz $7fe3			STZ	SYSTEM_VIA_DDRA		; Make Port A inputs
.fa5f	a9 08		lda #$08			LDA	#FIFO_RD
.fa61	8d e0 7f	sta $7fe0			STA	SYSTEM_VIA_IORB		; RD=1 WR=0 (RD must go to 0 to read
.fa64	ea		nop				NOP
.fa65	9c e0 7f	stz $7fe0			STZ	SYSTEM_VIA_IORB		; RD=0 WR=0	- FIFO presents data to port A
.fa68	ea		nop				NOP
.fa69	ea		nop				NOP
.fa6a	ea		nop				NOP
.fa6b	ea		nop				NOP
.fa6c	ad e1 7f	lda $7fe1			LDA	SYSTEM_VIA_IORA		; read data in
.fa6f	48		pha				PHA
.fa70	a9 08		lda #$08			LDA	#FIFO_RD		; Restore back to inactive signals RD=1 and WR=0
.fa72	8d e0 7f	sta $7fe0			STA	SYSTEM_VIA_IORB
.fa75	68		pla				PLA
.fa76	18		clc				CLC				; we got a byte!
.fa77	60		rts		INFXIT		RTS
>fa78	53 69 6c 6c 79 4d 6f 6e		ENTRYMSG	.text		"SillyMon816 v0.01",13,10
>fa80	38 31 36 20 76 30 2e 30 31 0d 0a
>fa8b	28 63 29 20 4e 65 76 65				.text		"(c) Never",13,10
>fa93	72 0d 0a
>fa96	4e 6f 20 72 69 67 68 74				.text		"No rights reserved",13,10,13,10
>fa9e	73 20 72 65 73 65 72 76 65 64 0d 0a 0d 0a
>faac	00						.text		0
>faad	53 65 6e 64 20 4d 6f 74		DOWNLOAD	.text		"Send Motorola S19 or S28 record file",13,10
>fab5	6f 72 6f 6c 61 20 53 31 39 20 6f 72 20 53 32 38
>fac5	20 72 65 63 6f 72 64 20 66 69 6c 65 0d 0a
>fad3	0d 0a 3e					.text		13,10,">"
>fad6	00						.text 		0
>fffa	00 f8				NMIENT  .word     START
>fffc	00 f8				RSTENT  .word     START
>fffe	00 f8				IRQENT  .word     START

;******  End of listing
